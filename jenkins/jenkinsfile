pipeline {
    agent any
    environment {
        PUSH_VERSION = "latest"
        DOCKERHUB_CREDENTIALS = credentials('docker-token')
        services = "gateway,eureka,user"
        PATH = "/usr/local/bin:/usr/bin:${env.PATH}" // kubectl과 ncp-iam-authenticator 경로 추가
        KUBECONFIG = '/var/lib/jenkins/kubeconfig.yaml' //사용자가 만든 kubeconfig 파일을 /var/lib/jenkins에 복사하고 jenkins에 권한 부여함
    }
    stages {
        stage('Github clone') {
            steps {
                git branch: "main", credentialsId: 'github-token', url: "https://github.com/rlafovj/tetrips-k8s-publish.git"
            }
        }
        stage("Docker Login") {
            steps {
               sh "echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin"
            }
        }
         stage('Java Build') {
            steps {
                script {
                    sh "chmod +x ./gradlew"
                    def servicesToBuild = [
                        "eureka-service",
                        "gateway-service",
                        "user-service"
                    ]
                    servicesToBuild.each { servicePath ->
                        sh "./gradlew :${servicePath}:bootJar"
                // 디렉토리가 존재하는지 확인
                        sh "mkdir -p ./docker-build-context/${servicePath}/build/libs"
                // 빌드 아티팩트를 Docker 빌드 컨텍스트로 복사
                        sh "cp -r ${servicePath}/build/libs/* ./docker-build-context/${servicePath}/build/libs/"
                    }
                }
            }
        }
        stage("Docker Image Remove") {
            steps {
                script {
                    services.split(',').each { service ->
                        sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/${service}:$PUSH_VERSION"
                        sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/${service}:$PUSH_VERSION"
                        sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/tetrips-${service}-service:$PUSH_VERSION"
                    }
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                sh "docker compose build"
            }
        }
        stage("Docker Image Tag and Clean") {
            steps {
                script {
                    services.split(',').each { service ->
                        // 기존 로컬 이미지 이름
                        def localImage = "tetrips-${service}-service:latest"
                        // 새로운 이미지 이름
                        def newImage = "$DOCKERHUB_CREDENTIALS_USR/tetrips-${service}-service:latest"

                        // 로컬 이미지에 새로운 태그 추가
                        sh "docker tag $localImage $newImage"

                        // 원래의 로컬 이미지 삭제 (옵션)
                        sh "docker rmi $localImage"
                    }
                }
            }
        }
        stage("Docker Push") {
            steps {
                script {
                    services.split(',').each { service ->
                        sh "docker push $DOCKERHUB_CREDENTIALS_USR/tetrips-${service}-service:$PUSH_VERSION"
                    }
                }
            }
        }
       stage('Deploy Kubernetes files') {
           steps {
               script {
                   // Verifying connection to the cluster
                   sh 'kubectl get nodes'

                   // Apply Kubernetes configurations
                   sh 'kubectl apply -f ./k8s/tetrips-deployment.yaml'
                   sh 'kubectl apply -f ./k8s/tetrips-service.yaml'
               }
           }
       }
   }
}